import *as THREE from "./libs/three/three.module.js"; import { GLTFLoader } from "./libs/three/jsm/GLTFLoader.js"; class App { constructor() { this.previousid = -1, this.clock = new THREE.Clock, this.previousTime = 0, this.last_stabbed_time = 0, this.die_time = 0, this.score_time = -1, this.timestamp = 0, this.receive_timestamp = 0, this.high_ping_time = -1, this.all_player_data = [], this.receive_player_data = [], this.objectsToUpdate = [], this.ready_sw = 0, this.right_sw = 0, this.left_sw = 0, this.jump_sw = 0, this.emoji_button_sw = 0, this.emoji_sw = -1, this.emoji = -1, this.emoji_time = 0, this.die_sw = 0, this.fox_finalpositionx = 0, this.fox_finalpositiony = 0, this.mixer = [], this.fox_push_power = 0, this.fox_push_power2 = 0, this.fox_score = 0, this.fox_life = 10, this.fox_previousPlane = null, this.fox_animation = 0, this.fox_plane_id = null, this.fox_plane_type = 0, this.fox_action = -1, this.spring_sound_play = 0, this.mobile = 0, this.gltfloader = (new GLTFLoader).setPath("./assets/model/"), this.stabbed_audio = document.getElementById("stabbedMusic"), this.plane_audio = document.getElementById("planeMusic"), this.convey_audio = document.getElementById("conveyMusic"), this.fake_audio = document.getElementById("fakeMusic"), this.spring_audio = document.getElementById("springMusic"), this.die_audio = document.getElementById("dieMusic"), /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && (this.mobile = 1, document.querySelector(".leader-board-wrapper").style.fontSize = "7px", document.querySelector(".leader-board-wrapper").style.top = "20px", document.querySelector(".leader-board-wrapper").style.width = "135px", document.querySelector(".leader-board-wrapper").style.height = "140px"); const t = document.createElement("div"); document.body.appendChild(t), this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, .1, 100), this.camera.position.set(0, 4, 45), this.scene = new THREE.Scene; const i = new THREE.HemisphereLight(16777215, 12303359, .8); this.scene.add(i); const e = new THREE.DirectionalLight(16777215, .5); e.position.set(.2, 1, 1), this.scene.add(e), this.renderer = new THREE.WebGLRenderer({ antialias: !0, alpha: !0 }), this.renderer.setPixelRatio(window.devicePixelRatio), this.renderer.setSize(window.innerWidth, window.innerHeight), t.appendChild(this.renderer.domElement), this.leaderboard = document.querySelector(".leader-board-wrapper"), this.own_score = document.querySelector(".own_score"), this.gg_board = document.querySelector(".gg_board"), this.restart = document.querySelector(".restart"), this.send_name = document.querySelector(".send_name"), this.modal = document.querySelector(".modal"), this.box = document.querySelector(".box"), this.initial_fox(), window.addEventListener("resize", this.resize.bind(this)), window.addEventListener("blur", () => { window.location.reload() }), document.querySelector(".Name").addEventListener("keydown", function (t) { 13 === t.keyCode && t.preventDefault() }), this.restart.addEventListener("click", () => { window.location.reload() }), this.send_name.addEventListener("click", () => { if (1 === this.ready_sw && this.ready_for_load_model) { this.ready_sw = 0, this.setListerner(), this.load_LifeBar(), this.modal.classList.add("hidden"), this.box.classList.remove("fadeOut"), this.box.classList.add("bounceOut"), this.leaderboard.classList.remove("hidden"), this.fox = this.model.clone(), this.fox.children[0].children[1].material = this.model.children[0].children[1].material.clone(), this.fox.children[1].children[0].children[1].material = this.model.children[1].children[0].children[1].material.clone(), this.fox.children[1].children[1].children[1].material = this.model.children[1].children[1].children[1].material.clone(), this.fox.children[2].children[0].children[1].material = this.model.children[2].children[0].children[1].material.clone(), this.fox.children[2].children[1].children[1].material = this.model.children[2].children[1].children[1].material.clone(), this.fox.position.x = this.fox_positionx, this.fox.position.y = 20, this.fox.children[0].children[1].material.color = new THREE.Color(this.fox_r, this.fox_g, this.fox_b), this.fox.children[1].children[0].children[1].material.color = new THREE.Color(this.fox_r, this.fox_g, this.fox_b), this.fox.children[1].children[1].children[1].material.color = new THREE.Color(this.fox_r, this.fox_g, this.fox_b), this.fox.children[2].children[0].children[1].material.color = new THREE.Color(this.fox_r, this.fox_g, this.fox_b), this.fox.children[2].children[1].children[1].material.color = new THREE.Color(this.fox_r, this.fox_g, this.fox_b), this.scene.add(this.fox); let t = { title: "init", positionx: this.fox_positionx, positiony: 20, r: this.fox_r, g: this.fox_g, b: this.fox_b, name: document.querySelector(".Name").value }; this.socket.send(JSON.stringify(t)), this.fox_name = document.createElement("div"), this.fox_name.style.position = "absolute", this.fox_name.style.width = 100, this.fox_name.style.height = 100, this.fox_name.style.opacity = .5, this.fox_name.style.color = "white", this.fox_name.innerHTML = document.querySelector(".Name").value, this.fox_name.style.top = window.innerHeight / 2 + "px", this.fox_name.style.left = window.innerWidth / 2 + "px", document.body.appendChild(this.fox_name), this.scene.remove(this.model) } }), this.worker = new Worker("Worker.js", { type: "module" }), this.renderer.setAnimationLoop(this.render.bind(this)); const o = new THREE.TextureLoader, a = o.load("./assets/12.jpeg"), s = o.load("./assets/13.jpeg"), n = o.load("./assets/matcap/1.png"), l = o.load("./assets/matcap/4.png"), h = o.load("./assets/matcap/4.png"), r = o.load("./assets/matcap/8.png"); this.green_texture2 = o.load("./assets/matcap/11.png"), this.planegeometry = new THREE.BoxGeometry(12, 2, 1), this.planematerial0 = new THREE.MeshStandardMaterial({ map: a }), this.planematerial1 = new THREE.MeshStandardMaterial({ map: a, color: 16711680 }), this.planematerial2 = new THREE.MeshStandardMaterial({ map: s }), this.planematerial3 = new THREE.MeshMatcapMaterial({ matcap: l }), this.planematerial4 = new THREE.MeshStandardMaterial({ color: 16777215 }), this.test_plane_size = null; let d = new THREE.PlaneGeometry(2700, 80), p = new THREE.MeshMatcapMaterial({ color: 1118600 }); p.matcap = n; const _ = new THREE.Mesh(d, p); _.position.z -= 10, this.scene.add(_), d = new THREE.ConeGeometry(1.5, 3, 64); let c = new THREE.MeshMatcapMaterial; c.matcap = l; for (let t = -1400; t < 1400; t += 3) { const i = new THREE.Mesh(d, c); i.rotation.x = Math.PI, i.position.y = 27.5, i.position.x = t, this.scene.add(i) } d = new THREE.BoxGeometry(2700, 1, 3); const m = new THREE.Mesh(d, c); m.position.y = 29, this.scene.add(m), this.sting_plane = new THREE.Group; const y = new THREE.BoxBufferGeometry(11, .5, 1), x = new THREE.Mesh(y, c); x.position.y += .1, this.sting_plane.add(x); const f = new THREE.Mesh(y, c); f.position.y += .73, this.sting_plane.add(f); const u = new THREE.ConeGeometry(.7, 2, 64); for (let t = -4.8; t < 5.6; t += 1.6) { const i = new THREE.Mesh(u, c); i.scale.z = .5, i.position.set(t, 1.8, 0), this.sting_plane.add(i) } this.convey = new THREE.Group; const b = new THREE.BoxBufferGeometry(11, 1.5, 1), w = new THREE.SphereGeometry(1.1, 32, 32), g = new THREE.CylinderGeometry(.1, .1, 2, 32), T = new THREE.CylinderGeometry(1.1, 1.1, 1, 32), E = new THREE.BoxBufferGeometry(.9, .3, 1); let M = new THREE.MeshMatcapMaterial; M.matcap = h; const j = new THREE.MeshBasicMaterial({ color: 3355443 }), H = new THREE.Mesh(b, new THREE.MeshStandardMaterial({ color: 6710886 })), L = new THREE.Group, v = new THREE.Mesh(w, M), R = new THREE.Mesh(T, M), z = new THREE.Mesh(g, j); for (let t = 0; t < 5; t++) { let i = z.clone(); i.position.set(.5 * Math.cos(t / Math.PI * 4), .5 * Math.sin(t / Math.PI * 4), -.3), i.rotation.x = Math.PI / 2, L.add(i) } L.add(v), L.add(R), R.rotation.x = Math.PI / 2, v.scale.z = .5, v.position.z = .2; const U = L.clone(); L.position.x = 5, U.position.x = -5; const P = new THREE.Group, S = new THREE.CylinderGeometry(.05, .5, 1, 32), k = new THREE.Mesh(S, new THREE.MeshStandardMaterial({ color: 15658581 })); k.rotation.z = Math.PI / 2, k.scale.z = .1, k.position.z = .5; const C = k.clone(); k.position.x -= .6, C.position.x += .6, P.add(k), P.add(C); const q = new THREE.Mesh(E, M), I = function (t, i) { return Math.round(Math.round(t * Math.pow(10, (i || 0) + 1)) / 10) / Math.pow(10, i || 0) }; for (let t = -5; t <= 5; t += 1) { let i, e; i = q.clone(), e = q.clone(), i.position.set(I(t, 2), .9, 0), e.position.set(I(t, 2), -.9, 0), this.convey.add(i), this.convey.add(e) } this.convey.add(P), this.convey.add(L), this.convey.add(U), this.convey.add(H), this.trampoline = new THREE.Group, this.trampoline_plane_geometry = new THREE.BoxBufferGeometry(12, .4, 1), this.green_material = new THREE.MeshMatcapMaterial({ color: 11206570 }), this.green_material.matcap = r; const G = new THREE.Mesh(this.trampoline_plane_geometry, this.green_material), A = new THREE.Mesh(this.trampoline_plane_geometry, this.green_material), B = new THREE.TorusGeometry(1, .08, 10, 10), W = new THREE.Mesh(B, c); W.rotation.x = Math.PI / 2, W.rotation.y = -.15, W.scale.y = .3; for (let t = -4.5; t < 6; t += 3)for (let i = -.6; i < .8; i += .2) { let e = W.clone(); e.position.set(t, i, 0), this.trampoline.add(e) } G.position.set(0, .8, 0), A.position.set(0, -.8, 0), this.trampoline.add(G), this.trampoline.add(A); let N = new THREE.PlaneGeometry(100, 80), F = new THREE.MeshStandardMaterial({ color: 16711680 }); this.stabbed_plane = new THREE.Mesh(N, F), this.stabbed_plane.position.z = 10, this.stabbed_plane.visible = !1, this.scene.add(this.stabbed_plane), this.calculate_screenWidth() } calculate_screenWidth() { const t = THREE.MathUtils.degToRad(this.camera.fov), i = 2 * Math.tan(t / 2) * 40 * this.camera.aspect; this.screenWidth = i } toXYCoords(t) { const i = t.position.clone(); i.x -= 2, i.y += 6, i.project(this.camera); const e = i.x * window.innerWidth * .5, o = -i.y * window.innerHeight * .5, a = new THREE.Vector2; return a.x = e, a.y = o, a } load_LifeBar() { this.add_life_material = new THREE.MeshMatcapMaterial({ color: 11206570, transparent: !0, opacity: .8 }), this.add_life_material.matcap = this.green_texture2, this.subtract_life_material = new THREE.MeshStandardMaterial({ color: 6710886, transparent: !0, opacity: .8 }); const t = new THREE.CylinderGeometry(.54, .54, 2.5, 10); this.life_bar = new THREE.Group; const i = new THREE.Mesh(t, new THREE.MeshStandardMaterial), e = (new GLTFLoader).setPath("./assets/model/"), o = this; e.load("life_bar.glb", function (t) { t.scene.scale.set(1.5, 1.5, 1.5), t.scene.position.x += 5, t.scene.position.y -= 3, o.life_bar.add(t.scene) }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }), i.scale.z = .3; for (let t = 2.3; t <= 12.5; t += 1.1) { const e = i.clone(); e.material = this.add_life_material, e.position.x = t, e.position.z -= 1, this.life_bar.add(e) } this.life_bar.scale.set(.9, .9, .3), this.scene.add(this.life_bar) } setsocketListener() { this.socket = new WebSocket("wss://nssocketio-grateful-possum-hk.mybluemix.net/"), this.socket.onmessage = (t => { let i = JSON.parse(t.data); if ("connected" === i.title) this.ready_sw = 1; else if ("setId" === i.title) this.myID = i.id, this.ready_sw = 1; else if ("init_all_fox" === i.title) { for (let t = 0; t < i.data.length; t++)i.data.id !== this.myID && this.loadPlayer(i.data[t].id, i.data[t].positionx, i.data[t].positiony, i.data[t].r, i.data[t].g, i.data[t].b, i.data[t].name); this.ready_for_load_model = 1 } else if ("player_join" === i.title) i.id !== this.myID && this.loadPlayer(i.id, i.positionx, i.positiony, i.r, i.g, i.b, i.name); else if ("deletePlayer" === i.title) { for (let t = 0; t < this.all_player_data.length; t++)if (this.all_player_data[t].id === i.id) { this.scene.remove(this.all_player_data[t].mesh), this.all_player_data[t].name_mesh.remove(), this.all_player_data.splice(t, 1); break } } else if ("all_player_data_update" === i.title) { this.receive_player_data = i.data; for (let t = 0; t < i.data.length; t++)if (i.data[t].id !== this.myID) for (let e = 0; e < this.all_player_data.length; e++)i.data[t].id === this.all_player_data[e].id && this.all_player_data[e].timestamp !== i.data[t].timestamp && (this.all_player_data[e].final_positionx[0] = this.all_player_data[e].final_positionx[1], this.all_player_data[e].final_positionx[1] = i.data[t].positionx, this.all_player_data[e].final_positiony[0] = this.all_player_data[e].final_positiony[1], this.all_player_data[e].final_positiony[1] = i.data[t].positiony, this.all_player_data[e].animation = i.data[t].animation, this.all_player_data[e].plane_id = i.data[t].plane_id, this.all_player_data[e].emoji = i.data[t].emoji, this.all_player_data[e].rank = i.data[t].rank, this.all_player_data[e].timestamp = i.data[t].timestamp, this.all_player_data[e].die_sw = i.data[t].die_sw); else if (i.data[t].id === this.myID && this.receive_timestamp !== i.data[t].timestamp) { let e = this.receive_timestamp; e > i.data[t].timestamp && (e -= 1e4), i.data[t].timestamp - e < 10 && this.clock.getElapsedTime() - this.high_ping_time > 2 ? (document.querySelector(".ping").style.color = "white", document.querySelector(".ping").innerHTML = "Ping: " + 10 * (i.data[t].timestamp - e), document.querySelector(".ping").innerHTML += '<font size="1vmin">ms</font>', this.high_ping_time = -1) : i.data[t].timestamp - e <= 11 && i.data[t].timestamp - e >= 10 ? (this.high_ping_time = this.clock.getElapsedTime(), document.querySelector(".ping").style.color = "white", document.querySelector(".ping").innerHTML = "Ping: " + 10 * (i.data[t].timestamp - e), document.querySelector(".ping").innerHTML += '<font size="1vmin">ms</font>') : i.data[t].timestamp - e > 11 && i.data[t].timestamp - e <= 13 ? (this.high_ping_time = this.clock.getElapsedTime(), document.querySelector(".ping").style.color = "orange", document.querySelector(".ping").innerHTML = "Ping: " + 10 * (i.data[t].timestamp - e), document.querySelector(".ping").innerHTML += '<font size="1vmin">ms</font>') : i.data[t].timestamp - e > 13 && (this.high_ping_time = this.clock.getElapsedTime(), document.querySelector(".ping").style.color = "red", document.querySelector(".ping").innerHTML = "Ping: " + 10 * (i.data[t].timestamp - e), document.querySelector(".ping").innerHTML += '<font size="1vmin">ms</font>', document.querySelector(".ping").innerHTML += " ⚠️"), this.fox_finalpositionx = i.data[t].positionx, this.fox_finalpositiony = i.data[t].positiony, this.receive_timestamp = i.data[t].timestamp } } else if ("all_player_score_update" === i.title) { for (let t = 0; t < i.data.length; t++)t < 10 && (document.querySelector(`.leaderboard-player${t + 1}`).innerHTML = "#" + (t + 1) + " " + i.data[t].name, document.querySelector(`.score${t + 1}`).innerHTML = i.data[t].score), i.data[t].id === this.myID && (document.querySelector(".own_rank").innerHTML = t + 1 + " of " + i.data.length, this.fox_rank = t + 1); if (i.data.length < 10) for (let t = i.data.length; t < 10; t++)document.querySelector(`.leaderboard-player${t + 1}`).innerHTML = "#" + (t + 1), document.querySelector(`.score${t + 1}`).innerHTML = 0 } else "plane_data" === i.title && (this.plane_data = i.data) }) } setListerner() { 1 === this.mobile && (document.querySelector(".mobile-left-button").classList.remove("hidden"), document.querySelector(".mobile-right-button").classList.remove("hidden"), document.querySelector(".mobile-q-button").classList.remove("hidden"), document.querySelector(".mobile-w-button").classList.remove("hidden"), document.querySelector(".mobile-e-button").classList.remove("hidden"), document.getElementsByClassName("mobile-left-button")[0].addEventListener("touchstart", () => { this.left_sw = 1 }), document.getElementsByClassName("mobile-right-button")[0].addEventListener("touchstart", () => { this.right_sw = 1 }), document.getElementsByClassName("mobile-q-button")[0].addEventListener("touchstart", () => { this.emoji_sw = 1, this.emoji_button_sw = 1 }), document.getElementsByClassName("mobile-w-button")[0].addEventListener("touchstart", () => { this.emoji_sw = 2, this.emoji_button_sw = 1 }), document.getElementsByClassName("mobile-e-button")[0].addEventListener("touchstart", () => { this.emoji_sw = 3, this.emoji_button_sw = 1 }), document.getElementsByClassName("mobile-left-button")[0].addEventListener("touchend", () => { this.left_sw = 0 }), document.getElementsByClassName("mobile-right-button")[0].addEventListener("touchend", () => { this.right_sw = 0 }), document.getElementsByClassName("mobile-q-button")[0].addEventListener("touchend", () => { this.emoji_sw = -1, this.emoji_button_sw = 0 }), document.getElementsByClassName("mobile-w-button")[0].addEventListener("touchend", () => { this.emoji_sw = -1, this.emoji_button_sw = 0 }), document.getElementsByClassName("mobile-e-button")[0].addEventListener("touchend", () => { this.emoji_sw = -1, this.emoji_button_sw = 0 })), window.addEventListener("keydown", t => { 68 !== t.keyCode && "ArrowRight" !== t.key || (this.right_sw = 1), 65 !== t.keyCode && "ArrowLeft" !== t.key || (this.left_sw = 1), 81 === t.keyCode && (this.emoji_sw = 1, this.emoji_button_sw = 1), 87 === t.keyCode && (this.emoji_sw = 2, this.emoji_button_sw = 1), 69 === t.keyCode && (this.emoji_sw = 3, this.emoji_button_sw = 1) }), window.addEventListener("keyup", t => { 68 !== t.keyCode && "ArrowRight" !== t.key || (this.right_sw = 0), 65 !== t.keyCode && "ArrowLeft" !== t.key || (this.left_sw = 0), 81 === t.keyCode && (this.emoji_sw = -1, this.emoji_button_sw = 0), 87 === t.keyCode && (this.emoji_sw = -1, this.emoji_button_sw = 0), 69 === t.keyCode && (this.emoji_sw = -1, this.emoji_button_sw = 0) }) } resize() { this.camera.aspect = window.innerWidth / window.innerHeight, this.camera.updateProjectionMatrix(), this.renderer.setSize(window.innerWidth, window.innerHeight), this.calculate_screenWidth() } initial_fox() { this.fox_positionx = Math.floor(2e3 * Math.random() - 1e3), this.fox_r = Math.random(), this.fox_g = Math.random(), this.fox_b = Math.random(), this.createModel() } createModel() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("body_ns.glb", function (t) { i.model = new THREE.Group; const e = t.scene; e.scale.set(20, 20, 20), e.position.y = -1, i.model.add(e), i.loadRhand() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadRhand() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("Rhand.glb", function (t) { i.Rhand = new THREE.Group; const e = t.scene; e.scale.set(15, 15, 15), e.position.z = -7, i.Rhand.add(e), i.model.add(i.Rhand), i.loadRfist() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadRfist() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("Rfist.glb", function (t) { const e = t.scene; e.scale.set(15, 15, 15), e.position.z = -7, i.Rhand.add(e), i.Rhand.position.y = -5, i.model.add(i.Rhand), i.loadLhand() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadLhand() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("Lhand.glb", function (t) { i.Lhand = new THREE.Group; const e = t.scene; e.scale.set(15, 15, 15), e.position.z = 7, i.Lhand.add(e), i.model.add(i.Lhand), i.loadLfist() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadLfist() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("Lfist.glb", function (t) { const e = t.scene; e.scale.set(15, 15, 15), e.position.z = 7, i.Lhand.add(e), i.Lhand.position.y = -5, i.model.add(i.Lhand), i.loadhead() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadhead() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("head_ns.glb", function (t) { const e = t.scene; e.scale.set(20, 20, 20), e.position.y = .2, e.position.x = 2, i.model.add(e), i.loadleg() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadleg() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("foot_ns.glb", function (t) { const e = t.scene; e.scale.set(18, 18, 18), e.position.x = 0, e.position.z = 4, e.position.y = 1, e.castShadow = !0, i.model.add(e); const o = e.clone(); o.position.z = -e.position.z, i.model.add(o), i.model.scale.set(.1, .1, .1), i.model.position.y = 20, i.loadAngry_symbol() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadAngry_symbol() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("angry_speech.glb", function (t) { const e = t.scene; e.scale.set(600, 600, 600), e.position.x = 10, e.position.y = 35, e.position.z = -15, i.model.add(e), i.loadThumbup_symbol() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadThumbup_symbol() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("thumbup_speech.glb", function (t) { const e = t.scene; e.scale.set(600, 600, 600), e.position.x = 10, e.position.y = 35, e.position.z = -15, i.model.add(e), i.loadheart_symbol() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadheart_symbol() { const t = (new GLTFLoader).setPath("./assets/model/"), i = this; t.load("heart_speech.glb", function (t) { const e = t.scene; e.scale.set(600, 600, 600), e.position.x = 10, e.position.y = 35, e.position.z = -15, i.model.add(e), i.scene.add(i.model), i.model.position.y = -26, i.setsocketListener() }, function (t) { }, function (t) { console.log("An error happened"), console.log(t) }) } loadPlayer(t, i, e, o, a, s, n) { const l = this.model.clone(); l.position.x = i, l.position.y = e; const h = document.createElement("div"); h.style.position = "absolute", h.style.width = 100, h.style.height = 100, h.style.opacity = .5, h.style.color = "white", h.innerHTML = n, h.style.top = window.innerHeight / 2 + "px", h.style.left = window.innerWidth / 2 + "px", document.body.appendChild(h), l.children[0].children[1].material = this.model.children[0].children[1].material.clone(), l.children[1].children[0].children[1].material = this.model.children[1].children[0].children[1].material.clone(), l.children[1].children[1].children[1].material = this.model.children[1].children[1].children[1].material.clone(), l.children[2].children[0].children[1].material = this.model.children[2].children[0].children[1].material.clone(), l.children[2].children[1].children[1].material = this.model.children[2].children[1].children[1].material.clone(), l.children[0].children[1].material.color = new THREE.Color(o, a, s), l.children[1].children[0].children[1].material.color = new THREE.Color(o, a, s), l.children[1].children[1].children[1].material.color = new THREE.Color(o, a, s), l.children[2].children[0].children[1].material.color = new THREE.Color(o, a, s), l.children[2].children[1].children[1].material.color = new THREE.Color(o, a, s); const r = []; r.push(i), r.push(i); const d = []; d.push(e), d.push(e), this.all_player_data.push({ mesh: l, id: t, onplane: null, plane_type: 0, onplane_time: 0, last_moving_time: 0, name_mesh: h, animation: 3, final_positionx: r, final_positiony: d, name: n, die_sw: 0 }), this.scene.add(l) } Animate_Character(t, i, e, o) { 1 === o ? (t.children[6].visible = !0, t.children[7].visible = !1, t.children[8].visible = !1) : 2 === o ? (t.children[6].visible = !1, t.children[7].visible = !0, t.children[8].visible = !1) : 3 === o ? (t.children[6].visible = !1, t.children[7].visible = !1, t.children[8].visible = !0) : (t.children[6].visible = !1, t.children[7].visible = !1, t.children[8].visible = !1); const a = Math.PI; let s = e; s *= 20, s %= 2 * a, 1 === i || 2 === i ? (t.children[4].position.x = 5 * Math.cos(s), t.children[4].position.y = Math.max(t.children[0].position.y - 6, t.children[4].position.y), t.children[5].position.x = 5 * Math.cos(s + a), t.children[5].position.y = Math.max(t.children[0].position.y - 6, t.children[5].position.y), t.children[0].position.y = -1 - 5 * Math.cos(2 * s) * .2, t.children[0].rotation.y = 5 * -Math.cos(s + a) * .05, t.children[1].children[0].visible = !1, t.children[1].children[1].visible = !0, t.children[1].position.x = 5 * Math.cos(s), t.children[1].rotation.x = 0, t.children[1].position.y = t.children[0].position.y - 4, t.children[1].position.z = t.children[0].position.z - 1, t.children[2].children[0].visible = !1, t.children[2].children[1].visible = !0, t.children[2].position.x = 5 * Math.cos(s + a), t.children[2].rotation.x = 0, t.children[2].position.y = t.children[0].position.y - 4, t.children[2].position.z = t.children[0].position.z + 1, t.children[3].position.y = 1 - 5 * Math.cos(2 * s) * .3, t.children[3].rotation.x = 5 * Math.cos(s) * .02, t.children[3].rotation.z = 0, t.children[3].position.x = t.children[0].position.x + 3, s > a ? (t.children[4].rotation.z = Math.cos(2 * s + a / 4) * a / 8, t.children[5].rotation.z = 0) : (t.children[4].rotation.z = 0, t.children[5].rotation.z = Math.cos(2 * s + a / 4) * a / 8), 1 === i ? (t.rotation.y = Math.PI + .2, t.children[6].rotation.y = Math.PI / 2 - .2, t.children[6].position.z = t.children[0].position.z - 12, t.children[6].position.x = t.children[0].position.x - 10, t.children[6].position.y = t.children[0].position.y + 40, t.children[7].rotation.y = Math.PI / 2 - .2, t.children[7].position.z = t.children[0].position.z - 12, t.children[7].position.x = t.children[0].position.x - 10, t.children[7].position.y = t.children[0].position.y + 40, t.children[8].rotation.y = Math.PI / 2 - .2, t.children[8].position.z = t.children[0].position.z - 12, t.children[8].position.x = t.children[0].position.x - 10, t.children[8].position.y = t.children[0].position.y + 40) : 2 === i && (t.rotation.y = -.2, t.children[6].rotation.y = -Math.PI / 2 + .2, t.children[6].position.z = t.children[0].position.z + 12, t.children[6].position.x = t.children[0].position.x + 15, t.children[6].position.y = t.children[0].position.y + 40, t.children[7].rotation.y = -Math.PI / 2 + .2, t.children[7].position.z = t.children[0].position.z + 12, t.children[7].position.x = t.children[0].position.x + 15, t.children[7].position.y = t.children[0].position.y + 40, t.children[8].rotation.y = -Math.PI / 2 + .2, t.children[8].position.z = t.children[0].position.z + 12, t.children[8].position.x = t.children[0].position.x + 15, t.children[8].position.y = t.children[0].position.y + 40)) : (t.children[6].rotation.y = 0, t.children[6].position.x = t.children[0].position.x + 10, t.children[6].position.z = t.children[0].position.z - 12, t.children[6].position.y = t.children[0].position.y + 40, t.children[7].rotation.y = 0, t.children[7].position.x = t.children[0].position.x + 10, t.children[7].position.z = t.children[0].position.z - 12, t.children[7].position.y = t.children[0].position.y + 40, t.children[8].rotation.y = 0, t.children[8].position.x = t.children[0].position.x + 10, t.children[8].position.z = t.children[0].position.z - 12, t.children[8].position.y = t.children[0].position.y + 40, 0 == i && (t.children[1].rotation.x = 0), t.children[1].children[0].visible = !1, t.children[1].children[1].visible = !0, t.children[1].rotation.z = 0, t.children[1].position.y = t.children[0].position.y - 2.5, t.children[1].position.x = t.children[0].position.x + .5, t.children[1].position.z = t.children[0].position.z - 2, 0 == i && (t.children[2].rotation.x = 0), t.children[2].children[0].visible = !1, t.children[2].children[1].visible = !0, t.children[2].rotation.z = 0, t.children[2].position.y = t.children[0].position.y - 2.5, t.children[2].position.x = t.children[0].position.x + .5, t.children[2].position.z = t.children[0].position.z + 2, t.children[3].rotation.z = Math.cos(e) / 10, t.children[3].rotation.x = 0, t.children[3].position.y = t.children[0].position.y + 1.2, t.children[3].position.x = t.children[0].position.x + 4, t.children[4].rotation.z = 0, t.children[4].position.y = t.children[0].position.y + 2, t.children[4].position.x = t.children[0].position.x, t.children[4].position.z = t.children[0].position.z - 4, t.children[5].rotation.z = 0, t.children[5].position.y = t.children[0].position.y + 2, t.children[5].position.x = t.children[0].position.x, t.children[5].position.z = t.children[0].position.z + 4, t.rotation.y = -Math.PI / 2, 3 === i && (t.children[1].children[0].visible = !0, t.children[1].children[1].visible = !1, t.children[2].children[0].visible = !0, t.children[2].children[1].visible = !1, Math.floor(100 * t.children[1].rotation.x) % 13 == 0 ? t.children[1].rotation.x += .13 : t.children[1].rotation.x -= .1, t.children[1].rotation.x < 0 && (t.children[1].rotation.x = .13), t.children[1].rotation.x > 1 && (t.children[1].rotation.x = .9), t.children[1].position.z = -2 + t.children[0].position.z - (21 - 21 * (1 - t.children[1].rotation.x)), t.children[1].position.y = t.children[0].position.y + 6 - 12 * (1 - t.children[1].rotation.x), t.children[1].position.x = t.children[0].position.x - 1, Math.floor(100 * t.children[2].rotation.x) % 13 == 0 ? t.children[2].rotation.x -= .13 : t.children[2].rotation.x += .1, t.children[2].rotation.x < -1 && (t.children[2].rotation.x = -.9), t.children[2].rotation.x > 0 && (t.children[2].rotation.x = -.13), t.children[2].position.z = 2 + t.children[0].position.z + (21 - 21 * (t.children[2].rotation.x + 1)), t.children[2].position.y = t.children[0].position.y + 6 - 12 * (t.children[2].rotation.x + 1), t.children[2].position.x = t.children[0].position.x - 1)) } calculate_life(t) { for (let i = 0; i < this.life_bar.children.length - 1; i++)i <= t - 1 ? this.life_bar.children[i].material = this.add_life_material : i > t - 1 && (this.life_bar.children[i].material = this.subtract_life_material) } myLerp(t, i, e) { return t + (i - t) * e } myBezier(t, i, e, o) { return (1 - o) * (1 - o) * t + 2 * (1 - o) * o * i + o * o * e } render() { this.right_block = 0, this.left_block = 0; const t = this.clock.getElapsedTime(); this.previousTime; if (this.previousTime = t, this.timestamp > 1e4 && (this.timestamp = 0), this.fox && (-1 === this.score_time && (this.score_time = t), t - this.score_time > 3 && this.die_sw), 1 === this.die_sw && (t - this.die_time > 1.5 && this.fox.position.y < -27 ? (this.scene.remove(this.fox), this.gg_board.classList.add("fadeOut2"), this.die_time = t) : (this.fox.position.y -= .35, this.Animate_Character(this.fox, 0, t, -1))), this.plane_data) { for (let i = 0; i < this.plane_data.length; i++) { let e, o, a = Math.abs(this.plane_data[i].id.substring(this.plane_data[i].id.length - 4, this.plane_data[i].id.length)); if (a % 6 == 1 ? (e = this.trampoline.clone(), o = 1) : a % 6 == 2 ? (e = new THREE.Mesh(this.planegeometry, this.planematerial2), o = 2) : a % 6 == 3 ? (e = this.convey.clone(), o = 3) : a % 6 == 4 ? ((e = this.convey.clone()).rotation.z = Math.PI, o = 4) : a % 6 == 5 ? (e = this.sting_plane.clone(), o = 5) : (e = new THREE.Mesh(this.planegeometry, this.planematerial0), o = 0), e.position.y = -22.5, e.position.x = this.plane_data[i].positionx, this.scene.add(e), null === this.test_plane_size) { const t = (new THREE.Box3).setFromObject(e); this.test_plane_size = new THREE.Vector3, t.getSize(this.test_plane_size) } this.objectsToUpdate.push({ id: this.plane_data[i].id, mesh: e, start_time: t, plane_type: o }) } this.plane_data = null } if (t - this.last_stabbed_time > .05 ? this.stabbed_plane.visible = !1 : this.stabbed_plane.visible = !0, this.worker && this.test_plane_size) { const i = [], e = [], o = this.test_plane_size.x; for (let t = 0; t < this.objectsToUpdate.length; t++)i.push({ positiony: this.objectsToUpdate[t].mesh.position.y, positionx: this.objectsToUpdate[t].mesh.position.x, id: this.objectsToUpdate[t].id, start_time: this.objectsToUpdate[t].start_time }); for (let t = 0; t < this.all_player_data.length; t++)e.push({ positiony: this.all_player_data[t].mesh.position.y, positionx: this.all_player_data[t].mesh.position.x, final_positiony: this.all_player_data[t].final_positiony[1], plane_id: this.all_player_data[t].plane_id }); let a = { type: "assign_plane", objectsToUpdate: i, all_player_data: e, elapsedTime: t, test_plane_size: o }; this.worker.postMessage(a) } for (let i = 0; i < this.objectsToUpdate.length; i++)if (this.objectsToUpdate[i].mesh.position.y += .2, this.objectsToUpdate[i].mesh.position.y = Math.ceil(100 * this.objectsToUpdate[i].mesh.position.y) / 100, this.objectsToUpdate[i].mesh.position.y <= 21) { if (this.fox && 0 === this.die_sw && Math.abs(this.fox.position.y - this.objectsToUpdate[i].mesh.position.y - 1) < .4 && this.fox.position.x < this.objectsToUpdate[i].mesh.position.x + this.test_plane_size.x / 1.8 && this.fox.position.x > this.objectsToUpdate[i].mesh.position.x - this.test_plane_size.x / 1.8 && this.fox_plane !== this.objectsToUpdate[i].mesh && (this.fox_score++, this.own_score.innerHTML = this.fox_score, this.fox_onplane_time = t, this.fox_plane_id = this.objectsToUpdate[i].id, this.fox_plane_type = this.objectsToUpdate[i].plane_type, this.fox_plane = this.objectsToUpdate[i].mesh), 3 === this.objectsToUpdate[i].plane_type) { this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 2].rotation.z = 2 * t, this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 3].rotation.z = 2 * t; for (let t = 0; t < this.objectsToUpdate[i].mesh.children.length - 4; t++)this.objectsToUpdate[i].mesh.children[t].position.y >= this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.y + .9 ? (this.objectsToUpdate[i].mesh.children[t].position.x -= .05, this.objectsToUpdate[i].mesh.children[t].position.x < this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.x - 5 && (this.objectsToUpdate[i].mesh.children[t].position.y -= 1.8)) : this.objectsToUpdate[i].mesh.children[t].position.y <= this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.y - .9 && (this.objectsToUpdate[i].mesh.children[t].position.x += .05, this.objectsToUpdate[i].mesh.children[t].position.x > this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.x + 5 && (this.objectsToUpdate[i].mesh.children[t].position.y += 1.8)) } if (4 === this.objectsToUpdate[i].plane_type) { this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 2].rotation.z = 2 * -t, this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 3].rotation.z = 2 * -t; for (let t = 0; t < this.objectsToUpdate[i].mesh.children.length - 4; t++)this.objectsToUpdate[i].mesh.children[t].position.y >= this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.y + .9 ? (this.objectsToUpdate[i].mesh.children[t].position.x += .05, this.objectsToUpdate[i].mesh.children[t].position.x > this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.x + 5 && (this.objectsToUpdate[i].mesh.children[t].position.y -= 1.8)) : this.objectsToUpdate[i].mesh.children[t].position.y <= this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.y - .9 && (this.objectsToUpdate[i].mesh.children[t].position.x -= .05, this.objectsToUpdate[i].mesh.children[t].position.x < this.objectsToUpdate[i].mesh.children[this.objectsToUpdate[i].mesh.children.length - 1].position.x - 5 && (this.objectsToUpdate[i].mesh.children[t].position.y += 1.8)) } 0 !== this.objectsToUpdate[i].mesh.rotation.x && (this.objectsToUpdate[i].mesh.rotation.x < 2 * Math.PI && (this.objectsToUpdate[i].mesh.rotation.x += Math.PI / 10), this.objectsToUpdate[i].mesh.rotation.x >= 2 * Math.PI && (this.objectsToUpdate[i].mesh.rotation.x = 0)) } else this.objectsToUpdate[i].mesh.position.y > 23 && (this.scene.remove(this.objectsToUpdate[i].mesh), this.objectsToUpdate.splice(i, 1)); if (this.ready_for_load_model) { this.worker.onmessage = (i => { if ("assign_plane" === i.data.type) for (let e = 0; e < i.data.data.length; e++)null !== this.all_player_data[i.data.data[e].player].onplane ? this.objectsToUpdate[i.data.data[e].plane].mesh.position.y <= this.all_player_data[i.data.data[e].player].onplane.position.y && (this.all_player_data[i.data.data[e].player].onplane !== this.objectsToUpdate[i.data.data[e].plane].mesh && (this.all_player_data[i.data.data[e].player].onplane_time = t), this.all_player_data[i.data.data[e].player].onplane = this.objectsToUpdate[i.data.data[e].plane].mesh, this.all_player_data[i.data.data[e].player].plane_type = this.objectsToUpdate[i.data.data[e].plane].plane_type) : (this.all_player_data[i.data.data[e].player].onplane_time = t, this.all_player_data[i.data.data[e].player].onplane = this.objectsToUpdate[i.data.data[e].plane].mesh, this.all_player_data[i.data.data[e].player].plane_type = this.objectsToUpdate[i.data.data[e].plane].plane_type) }); for (let i = 0; i < this.all_player_data.length; i++) { if (1 === this.all_player_data[i].die_sw) { this.all_player_data[i].mesh.position.y -= .35, this.Animate_Character(this.all_player_data[i].mesh, 0, t, -1); let e = this.toXYCoords(this.all_player_data[i].mesh); this.all_player_data[i].name_mesh.style.transform = `translateX(${e.x}px) translateY(${e.y}px)`, this.all_player_data[i].name_mesh.style.top = window.innerHeight / 2 + "px", this.all_player_data[i].name_mesh.style.left = window.innerWidth / 2 + "px" } else { if (this.all_player_data[i].onplane && this.all_player_data[i].onplane.position.y > 21 && (this.all_player_data[i].onplane = null, this.all_player_data[i].plane_type = -1), this.all_player_data[i].mesh.position.x > this.camera.position.x - this.screenWidth && this.all_player_data[i].mesh.position.x < this.camera.position.x + this.screenWidth) { if (3 !== this.all_player_data[i].plane_type && 4 !== this.all_player_data[i].plane_type) { let t = Math.abs(this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x); t >= .25 ? this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .25 / t) : t < .25 && (this.all_player_data[i].mesh.position.x = this.all_player_data[i].final_positionx[1]) } else if (this.all_player_data[i].onplane && 3 === this.all_player_data[i].plane_type) { let t = Math.abs(this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x); this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x >= .1 ? this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .1 / t) : this.all_player_data[i].mesh.position.x - this.all_player_data[i].final_positionx[1] >= .8 ? this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .4 / t) : this.all_player_data[i].mesh.position.x - this.all_player_data[i].final_positionx[1] >= .15 && (this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .15 / t)) } else if (this.all_player_data[i].onplane && 4 === this.all_player_data[i].plane_type) { let t = Math.abs(this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x); this.all_player_data[i].mesh.position.x - this.all_player_data[i].final_positionx[1] >= .1 ? this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .1 / t) : this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x >= .8 ? this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .4 / t) : this.all_player_data[i].final_positionx[1] - this.all_player_data[i].mesh.position.x >= .15 && (this.all_player_data[i].mesh.position.x = this.myLerp(this.all_player_data[i].mesh.position.x, this.all_player_data[i].final_positionx[1], .15 / t)) } if (null === this.all_player_data[i].onplane) { let t = Math.abs(this.all_player_data[i].mesh.position.y - this.all_player_data[i].final_positiony[1]); t >= 3 ? this.all_player_data[i].mesh.position.y = this.myLerp(this.all_player_data[i].mesh.position.y, this.all_player_data[i].final_positiony[1], .15 / t) : this.all_player_data[i].mesh.position.y -= .15 } else if (this.all_player_data[i].onplane) if (this.all_player_data[i].mesh.position.x < this.all_player_data[i].onplane.position.x + this.test_plane_size.x / 1.8 && this.all_player_data[i].mesh.position.x > this.all_player_data[i].onplane.position.x - this.test_plane_size.x / 1.8 && this.all_player_data[i].onplane.position.y - this.all_player_data[i].final_positiony[1] < 3) if (1 === this.all_player_data[i].plane_type) this.all_player_data[i].onplane.children[this.all_player_data[i].onplane.children.length - 1].position.y = .04 * Math.cos(Math.PI * (22 * (t - this.all_player_data[i].onplane_time))) * 1.5 - .8, this.all_player_data[i].onplane.children[this.all_player_data[i].onplane.children.length - 2].position.y = .8 + .1 * Math.cos(Math.PI * (22 * (t - this.all_player_data[i].onplane_time))) * 1.5, this.all_player_data[i].mesh.position.y = this.all_player_data[i].onplane.position.y + 2 * Math.sin(Math.PI * (2.8 * (t - this.all_player_data[i].onplane_time))), this.all_player_data[i].mesh.position.y += 3; else if (2 === this.all_player_data[i].plane_type) { let t = Math.abs(this.all_player_data[i].mesh.position.y - this.all_player_data[i].final_positiony[1]); t >= 3 ? this.all_player_data[i].mesh.position.y = this.myLerp(this.all_player_data[i].mesh.position.y, this.all_player_data[i].final_positiony[1], .15 / t) : this.all_player_data[i].mesh.position.y -= .15, this.all_player_data[i].mesh.position.y < this.all_player_data[i].onplane.position.y + 1 && (0 === this.all_player_data[i].onplane.rotation.x && (this.all_player_data[i].onplane.rotation.x += Math.PI / 10), this.all_player_data[i].onplane = null, this.all_player_data[i].plane_type = -1) } else if (this.all_player_data[i].mesh.position.y > this.all_player_data[i].onplane.position.y + 1.4) { let t = Math.abs(this.all_player_data[i].mesh.position.y - this.all_player_data[i].final_positiony[1]); t >= 3 ? this.all_player_data[i].mesh.position.y = this.myLerp(this.all_player_data[i].mesh.position.y, this.all_player_data[i].final_positiony[1], .15 / t) : this.all_player_data[i].mesh.position.y -= .15 } else this.all_player_data[i].mesh.position.y = this.all_player_data[i].onplane.position.y + 1; else { let t = Math.abs(this.all_player_data[i].mesh.position.y - this.all_player_data[i].final_positiony[1]); t >= 3 ? this.all_player_data[i].mesh.position.y = this.myLerp(this.all_player_data[i].mesh.position.y, this.all_player_data[i].final_positiony[1], .15 / t) : this.all_player_data[i].mesh.position.y -= .15, this.all_player_data[i].onplane = null, this.all_player_data[i].plane_type = -1 } this.fox && this.all_player_data[i].mesh.position.distanceTo(this.fox.position) <= 3.7 && this.all_player_data[i].onplane && this.fox_plane && this.all_player_data[i].onplane === this.fox_plane && (this.all_player_data[i].final_positionx[1] > this.fox_finalpositionx && this.all_player_data[i].mesh.position.x > this.fox.position.x ? (this.all_player_data[i].final_positionx[1] += .25, this.all_player_data[i].mesh.position.x += .25, this.right_block = 1, this.fox.position.x -= .25, this.fox_finalpositionx -= .25) : this.all_player_data[i].final_positionx[1] < this.fox_finalpositionx && this.all_player_data[i].mesh.position.x < this.fox.position.x && (this.all_player_data[i].final_positionx[1] -= .25, this.all_player_data[i].mesh.position.x -= .25, this.left_block = 1, this.fox.position.x += .25, this.fox_finalpositionx += .25)), this.Animate_Character(this.all_player_data[i].mesh, this.all_player_data[i].animation, t, this.all_player_data[i].emoji); let e = this.toXYCoords(this.all_player_data[i].mesh); this.all_player_data[i].name_mesh.style.transform = `translateX(${e.x}px) translateY(${e.y}px)`, this.all_player_data[i].name_mesh.style.top = window.innerHeight / 2 + "px", this.all_player_data[i].name_mesh.style.left = window.innerWidth / 2 + "px", 1 === this.all_player_data[i].rank ? (this.all_player_data[i].name_mesh.style.color = "gold", 0 === this.mobile ? this.all_player_data[i].name_mesh.innerHTML = '<font size="6vmin">👑</font>' + this.all_player_data[i].name : this.all_player_data[i].name_mesh.innerHTML = '<font size="3vmin">👑</font>' + this.all_player_data[i].name) : this.all_player_data[i].rank <= 10 ? (this.all_player_data[i].name_mesh.style.color = "gold", this.all_player_data[i].name_mesh.innerHTML = this.all_player_data[i].name) : (this.all_player_data[i].name_mesh.style.color = "white", this.all_player_data[i].name_mesh.innerHTML = this.all_player_data[i].name) } else this.all_player_data[i].mesh.position.x = this.all_player_data[i].final_positionx[1], this.all_player_data[i].mesh.position.y = this.all_player_data[i].final_positiony[1], this.all_player_data[i].name_mesh.style.transform = "translateX(10000px) translateY(10000px)"; new THREE.Vector3(this.all_player_data[i].final_positionx[1], this.all_player_data[i].final_positiony[1], 0).distanceTo(this.all_player_data[i].mesh.position) > 10 && (this.all_player_data[i].mesh.position.y = this.all_player_data[i].final_positiony[1], this.all_player_data[i].mesh.position.x = this.all_player_data[i].final_positionx[1], this.all_player_data[i].onplane = null, this.all_player_data[i].plane_type = -1) } this.all_player_data[i].mesh.position.y = Math.ceil(100 * this.all_player_data[i].mesh.position.y) / 100, this.all_player_data[i].mesh.position.x = Math.ceil(100 * this.all_player_data[i].mesh.position.x) / 100 } } if (this.fox && 0 === this.die_sw) { this.camera.position.x = this.fox.position.x, this.emoji_button_sw ? t - this.emoji_time > 3 && -1 !== this.emoji_sw ? (this.emoji_time = t, this.emoji = this.emoji_sw) : this.emoji_sw = -1 : t - this.emoji_time > 3 && (this.emoji = -1), this.left_sw ? (this.fox_animation = 1, 0 === this.left_block && (this.fox.position.x -= .25), this.Animate_Character(this.fox, 1, t, this.emoji)) : this.right_sw ? (this.fox_animation = 2, 0 === this.right_block && (this.fox.position.x += .25), this.Animate_Character(this.fox, 2, t, this.emoji)) : this.fox_plane || this.left_sw || this.right_sw || (this.fox_animation = 3, this.Animate_Character(this.fox, 3, t, this.emoji)), this.fox_plane && (this.fox.position.x < this.fox_plane.position.x - this.test_plane_size.x / 1.8 || this.fox.position.x > this.fox_plane.position.x + this.test_plane_size.x / 1.8) && (this.fox_plane = null, this.fox_plane_id = null, this.left_sw || this.right_sw || (this.fox_animation = 3, this.Animate_Character(this.fox, 3, t, this.emoji))), this.fox_plane ? (1 === this.fox_plane_type ? (this.fox.position.y - this.fox_plane.position.y - 1 < .4 && 0 === this.spring_sound_play ? (this.spring_sound_play = 1, this.fox_life < 10 && this.fox_life++, this.fox_onplane_time !== t && this.fox_score++, this.own_score.innerHTML = this.fox_score) : this.fox.position.y - this.fox_plane.position.y - 1 >= .4 && 1 === this.spring_sound_play && (this.spring_sound_play = 0), 1 === this.spring_sound_play && this.spring_audio.play(), this.fox_plane.children[this.fox_plane.children.length - 1].position.y = .04 * Math.cos(Math.PI * (22 * (t - this.fox_onplane_time))) * 1.5 - .8, this.fox_plane.children[this.fox_plane.children.length - 2].position.y = .8 + .1 * Math.cos(Math.PI * (22 * (t - this.fox_onplane_time))) * 1.5, this.fox.position.y = this.fox_plane.position.y + 2 * Math.sin(Math.PI * (2.8 * (t - this.fox_onplane_time))), this.fox.position.y += 3, this.left_sw || this.right_sw || (this.fox_animation = 3, this.Animate_Character(this.fox, 3, t, this.emoji))) : 2 === this.fox_plane_type ? t - this.fox_onplane_time > .1 ? (this.fox.position.y -= .15, this.fox_plane.rotation.x += Math.PI / 10, this.fox_plane = null, this.left_sw || this.right_sw || (this.fox_animation = 3, this.Animate_Character(this.fox, 3, t, this.emoji))) : (this.fox_previousPlane = this.fox_plane, this.fox.position.y = this.fox_plane.position.y + 1, this.left_sw || this.right_sw || (this.fox_animation = 0, this.Animate_Character(this.fox, 0, t, this.emoji))) : (this.fox.position.y = this.fox_plane.position.y + 1, this.left_sw || this.right_sw || (this.fox_animation = 0, this.Animate_Character(this.fox, 0, t, this.emoji))), 0 === this.fox_plane_type && this.fox_previousPlane !== this.fox_plane && (this.plane_audio.play(), this.fox_life < 10 && this.fox_life++), 2 === this.fox_plane_type && this.fox_previousPlane !== this.fox_plane && (this.fake_audio.play(), this.fox_life < 10 && this.fox_life++), 3 === this.fox_plane_type && (this.fox.position.x -= .15, this.fox_previousPlane !== this.fox_plane && (this.convey_audio.play(), this.fox_life < 10 && this.fox_life++)), 4 === this.fox_plane_type && (this.fox.position.x += .15, this.fox_previousPlane !== this.fox_plane && (this.convey_audio.play(), this.fox_life < 10 && this.fox_life++)), 5 === this.fox_plane_type && this.fox_life > 0 && this.fox_previousPlane !== this.fox_plane && (this.fox_life -= 3, this.stabbed_audio.play(), this.last_stabbed_time = t)) : this.fox.position.y -= .15, this.fox_plane && this.fox_plane.position.y > 21 && (this.stabbed_audio.play(), this.fox_plane = null, this.fox_life > 0 && (this.fox_life -= 3), this.last_stabbed_time = t), this.fox.position.y < -23 && 0 === this.die_sw && (this.die_audio.play(), this.die_sw = 1, this.fox_name.remove(), document.querySelector(".final_score").innerHTML += this.fox_score, this.die_time = t), this.fox_life <= 0 && 0 === this.die_sw && (this.die_audio.play(), this.die_sw = 1, this.fox_name.remove(), document.querySelector(".final_score").innerHTML += this.fox_score, this.die_time = t), this.fox.position.y = Math.ceil(100 * this.fox.position.y) / 100, this.fox.position.x = Math.ceil(100 * this.fox.position.x) / 100, document.querySelector(".current-position").innerHTML = "Position: " + this.fox.position.x, this.calculate_life(this.fox_life); let i = { title: "player_position_update", id: this.myID, positionx: this.fox.position.x, positiony: this.fox.position.y, animation: this.fox_animation, plane_id: this.fox_plane_id, score: this.fox_score, emoji: this.emoji, rank: this.fox_rank, timestamp: this.timestamp, die_sw: this.die_sw }; this.socket.send(JSON.stringify(i)), this.timestamp++; let e = this.toXYCoords(this.fox); this.fox_name.style.transform = `translateX(${e.x}px) translateY(${e.y}px)`, this.fox_name.style.top = window.innerHeight / 2 + "px", this.fox_name.style.left = window.innerWidth / 2 + "px", 1 === this.fox_rank ? (this.fox_name.style.color = "gold", 0 === this.mobile ? this.fox_name.innerHTML = '<font size="6vmin">👑</font>' + document.querySelector(".Name").value : this.fox_name.innerHTML = '<font size="3vmin">👑</font>' + document.querySelector(".Name").value) : this.fox_rank <= 10 ? (this.fox_name.style.color = "gold", this.fox_name.innerHTML = document.querySelector(".Name").value) : (this.fox_name.style.color = "white", this.fox_name.innerHTML = document.querySelector(".Name").value) } null !== this.fox_plane && (this.fox_previousPlane = this.fox_plane), this.screenWidth && this.life_bar && this.life_bar.position.set(this.camera.position.x - this.screenWidth / 2 * .75, 18, 10), this.stabbed_plane.position.set(this.camera.position.x, 0, 10), this.renderer.render(this.scene, this.camera) } } export { App };